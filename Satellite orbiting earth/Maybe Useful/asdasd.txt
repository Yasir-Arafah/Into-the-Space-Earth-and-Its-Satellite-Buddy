import * as THREE from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';

let scene, camera, renderer, earthMesh, cloudMesh, starMesh, sunlight, controls, satellite;
let azimuthalAngle = Math.PI / 2; // Initial horizontal angle (theta)
let polarAngle = Math.PI / 2; // Initial vertical angle (phi)
const radius = 6; // Increased distance from the satellite for better view
const raycaster = new THREE.Raycaster();
const mouse = new THREE.Vector2();
let satelliteAngle = 0; // Angle for the satellite's orbit
const satelliteOrbitRadiusX = 3; // Radius of the satellite's orbit on the X-axis (closer to Earth)
const satelliteOrbitRadiusY = 2; // Radius of the satellite's orbit on the Y-axis (inclined orbit)
const satelliteOrbitRadiusZ = 3; // Radius of the satellite's orbit on the Z-axis (closer to Earth)
const satelliteSpeed = 0.01; // Speed of the satellite's orbit

function init() {
    scene = new THREE.Scene();
    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.set(radius * Math.cos(azimuthalAngle) * Math.sin(polarAngle), radius * Math.cos(polarAngle), radius * Math.sin(azimuthalAngle) * Math.sin(polarAngle));

    renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    // Lighting
    const ambientLight = new THREE.AmbientLight(0x333333);
    scene.add(ambientLight);
    
    // Sunlight
    sunlight = new THREE.DirectionalLight(0xffffff, 1.5);
    sunlight.position.set(5, 0, 5); // Position the light to the side of the Earth
    sunlight.castShadow = true;
    scene.add(sunlight);

    // Earth Geometry
    const earthGeometry = new THREE.SphereGeometry(2, 32, 32);

    // Textures
    const textureLoader = new THREE.TextureLoader();
    const earthTexture = textureLoader.load('textures/earth/earth4.jpg');
    const specularMap = textureLoader.load('textures/earth/e2.jpg');
    const cloudTexture = textureLoader.load('textures/earth/e3.jpg', () => combineCloudTextures(cloudTexture, 'textures/earth/e5.jpg'));
    const nightTexture = textureLoader.load('textures/earth/e4.jpg');
    const starTexture = textureLoader.load('textures/stars/stars.jpg', createStarBackground);

    // Earth Material
    const earthMaterial = new THREE.MeshPhongMaterial({
        map: earthTexture,
        specularMap: specularMap,
        specular: new THREE.Color('grey')
    });
    earthMesh = new THREE.Mesh(earthGeometry, earthMaterial);
    scene.add(earthMesh);

    // Satellite
    createSatellite();

    // Controls
    controls = new OrbitControls(camera, renderer.domElement);
    controls.target.set(0, 0, 0); // Set initial target to the Earth's position

    controls.addEventListener('change', updateAngles); // Listen for changes to update angles

    // Keyboard interaction
    window.addEventListener('keydown', onDocumentKeyDown, false);

    // Mouse interaction
    window.addEventListener('click', onDocumentMouseClick, false);

    animate();
}

// Combine two cloud textures to create a blended cloud layer
function combineCloudTextures(baseTexture, additionalTexturePath) {
    const textureLoader = new THREE.TextureLoader();
    textureLoader.load(additionalTexturePath, (additionalTexture) => {
        const canvas = document.createElement('canvas');
        const size = 1024; // Assuming the texture size is 1024x1024
        canvas.width = size;
        canvas.height = size;
        const context = canvas.getContext('2d');

        // Draw the base cloud texture
        context.drawImage(baseTexture.image, 0, 0, size, size);
        
        // Draw the additional cloud texture with some transparency
        context.globalAlpha = 0.5; // Adjust transparency to blend
        context.drawImage(additionalTexture.image, 0, 0, size, size);

        const blendedTexture = new THREE.CanvasTexture(canvas);

        // Create the cloud material with the blended texture
        const cloudGeometry = new THREE.SphereGeometry(2.05, 32, 32);
        const cloudMaterial = new THREE.MeshPhongMaterial({
            map: blendedTexture,
            transparent: true,
            opacity: 0.4
        });
        cloudMesh = new THREE.Mesh(cloudGeometry, cloudMaterial);
        scene.add(cloudMesh);
    });
}

// Create the star background as a large sphere surrounding the scene
function createStarBackground(starTexture) {
    const starGeometry = new THREE.SphereGeometry(90, 64, 64);
    const starMaterial = new THREE.MeshBasicMaterial({
        map: starTexture,
        side: THREE.BackSide // Ensure the texture is rendered inside the sphere
    });
    starMesh = new THREE.Mesh(starGeometry, starMaterial);
    scene.add(starMesh);
}

// Create the satellite model
function createSatellite() {
    satellite = new THREE.Group();

    // Main body
    const bodyGeometry = new THREE.BoxGeometry(0.1, 0.1, 0.2);
    const bodyMaterial = new THREE.MeshPhongMaterial({ color: 0xaaaaaa });
    const bodyMesh = new THREE.Mesh(bodyGeometry, bodyMaterial);
    satellite.add(bodyMesh);

    // Solar panels
    const panelGeometry = new THREE.BoxGeometry(0.3, 0.15, 0.01); // Adjusted panel dimensions for vertical orientation
    const panelMaterial = new THREE.MeshPhongMaterial({ color: 0x0000ff });
    const leftPanelMesh = new THREE.Mesh(panelGeometry, panelMaterial);
    leftPanelMesh.position.set(-0.25, 0, 0.0); // Position the panel vertically
    satellite.add(leftPanelMesh);

    const rightPanelMesh = new THREE.Mesh(panelGeometry, panelMaterial);
    rightPanelMesh.position.set(0.25, 0, 0.0); // Position the panel vertically
    satellite.add(rightPanelMesh);

    // Antenna
    const antennaGeometry = new THREE.CylinderGeometry(0.005, 0.005, 0.1);
    const antennaMaterial = new THREE.MeshPhongMaterial({ color: 0xff0000 });
    const antennaMesh = new THREE.Mesh(antennaGeometry, antennaMaterial);
    antennaMesh.position.set(0, 0.1, 0);
    satellite.add(antennaMesh);

    // Additional details
    const detailGeometry = new THREE.BoxGeometry(0.05, 0.05, 0.05);
    const detailMaterial = new THREE.MeshPhongMaterial({ color: 0x555555 });
    const detailMesh = new THREE.Mesh(detailGeometry, detailMaterial);
    detailMesh.position.set(0, -0.1, 0);
    satellite.add(detailMesh);

    satellite.position.set(satelliteOrbitRadiusX, 0, 0); // Initial position

    scene.add(satellite);
}

// Handle keyboard interaction to update camera position
function onDocumentKeyDown(event) {
    const keyCode = event.which;
    const angleStep = 0.05;

    switch (keyCode) {
        case 37: // left arrow key
            azimuthalAngle -= angleStep;
            break;
        case 39: // right arrow key
            azimuthalAngle += angleStep;
            break;
        case 38: // up arrow key
            polarAngle = Math.max(0.1, polarAngle - angleStep);
            break;
        case 40: // down arrow key
            polarAngle = Math.min(Math.PI - 0.1, polarAngle + angleStep);
            break;
    }

    updateCameraPosition();
}

// Handle mouse click interaction to change satellite texture
function onDocumentMouseClick() {
    // Change the color of the satellite
    satellite.traverse((child) => {
        if (child.isMesh) {
            if (child.material.color.getHex() === 0xaaaaaa) {
                child.material.color.set(0xff0000); // Change to red
            } else if (child.material.color.getHex() === 0x0000ff) {
                child.material.color.set(0x00ff00); // Change to green
            } else if (child.material.color.getHex() === 0xff0000) {
                child.material.color.set(0x0000ff); // Change to blue
            } else {
                child.material.color.set(0xaaaaaa); // Change back to original color
            }
        }
    });
}

// Update camera angles based on camera position
function updateAngles() {
    // Calculate initial azimuthal and polar angles based on camera position relative to the satellite
    const deltaX = camera.position.x - satellite.position.x;
    const deltaY = camera.position.y - satellite.position.y;
    const deltaZ = camera.position.z - satellite.position.z;

    const r = Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ);
    polarAngle = Math.acos(deltaY / r);
    azimuthalAngle = Math.atan2(deltaZ, deltaX);
}

// Update camera position based on current angles
function updateCameraPosition() {
    const x = satellite.position.x + radius * Math.sin(polarAngle) * Math.cos(azimuthalAngle);
    const y = satellite.position.y + radius * Math.cos(polarAngle);
    const z = satellite.position.z + radius * Math.sin(polarAngle) * Math.sin(azimuthalAngle);

    camera.position.set(x, y, z);
    camera.lookAt(satellite.position); // Ensure the camera looks at the satellite
}

// Animation loop to render the scene and update the satellite position
function animate() {
    requestAnimationFrame(animate);
    if (earthMesh) earthMesh.rotation.y += 0.001; // Rotate the Earth slowly
    if (cloudMesh) cloudMesh.rotation.y += 0.002; // Rotate the clouds faster to simulate weather dynamics

    // Update satellite position for orbiting in an inclined elliptical orbit
    satelliteAngle += satelliteSpeed;
    satellite.position.set(
        satelliteOrbitRadiusX * Math.cos(satelliteAngle),
        satelliteOrbitRadiusY * Math.sin(satelliteAngle), // Adding inclination to the orbit
        satelliteOrbitRadiusZ * Math.sin(satelliteAngle)
    );

    // Ensure the satellite faces the Earth
    satellite.lookAt(earthMesh.position);

    controls.update(); // Update controls for mouse interaction
    renderer.render(scene, camera); // Render the scene
}

init();
